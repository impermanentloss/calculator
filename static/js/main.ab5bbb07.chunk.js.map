{"version":3,"sources":["components/ImpermanentLossCalculator/index.js","App.js","reportWebVitals.js","index.js"],"names":["ImpermanentLossCalculator","useDisclosure","isOpen","onToggle","colorMode","useColorMode","useState","uuid","name","priceChange","weight","assets","setAssets","getAssetPriceChangeInX","assetPriceChangeinPercent","Math","abs","holdValue","map","asset","reduce","assetA","assetB","poolValue","pow","impermanentLoss","BNPoolValue","BigNumber","BNHoldValue","dividedBy","minus","dp","calculateImpermanentLoss","totalPoolWeight","a","b","Number","addAsset","clearAssets","w","md","p","base","m","mt","borderWidth","rounded","borderColor","columns","minChildWidth","fontSize","length","value","formatValue","numeral","format","duration","color","size","variant","textDecoration","onClick","my","alignItems","Info","mr","borderRadius","mb","fontStyle","i","display","leftIcon","Add","colorScheme","Repeat","isInline","spacing","fontWeight","sm","spacingX","align","direction","placeholder","onChange","e","newAssets","newAsset","target","updateName","type","step","min","updatePriceChange","children","max","focusBorderColor","updateWeight","borderLeftColor","thisAsset","filter","Delete","justifyContent","wrap","DONATIONS","symbol","walletAdr","logo","STYLES","main","marginBottom","header","height","overflow","paddingTop","paddingLeft","content","background","padding","footer","input","marginLeft","marginRight","minWidth","table","margin","table2","paddingBottom","textCenter","textAlign","App","props","state","initialValueA","initialValueB","initialAmountA","initialAmoungB","initialPriceAB","currentValueA","currentValueB","currentAmountA","currentAmountB","currentPriceAB","totalSpent","totalReceived","totalPotential","impermanentLossValue","impermanentLossPercent","changeValue","bind","donations","counter","push","localThis","this","calculateStuff","sqrt","initialAmountB","setState","isNaN","event","isCoinA","isInitial","isValue","style","className","getDonationComponent","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab5bbb07.chunk.js","sourcesContent":["import {\r\n    Box,\r\n    Button,\r\n    Divider,\r\n    Flex,\r\n    FormControl,\r\n    Link,\r\n    Input,\r\n    InputGroup,\r\n    InputRightElement,\r\n    Stack,\r\n    Stat,\r\n    StatLabel,\r\n    StatNumber,\r\n    Text,\r\n    useDisclosure,\r\n    StatHelpText,\r\n    FormLabel,\r\n    SimpleGrid,\r\n    Heading,\r\n    useColorMode,\r\n  } from '@chakra-ui/react'\r\n  import numeral from 'numeral'\r\n  import React, { useState } from 'react'\r\n  import { v4 as uuid } from 'uuid'\r\n  import AnimatedNumber from 'animated-number-react'\r\n  import { AddIcon, DeleteIcon, InfoIcon, RepeatIcon } from '@chakra-ui/icons'\r\n  import { BigNumber } from 'bignumber.js'\r\n\r\n  const ImpermanentLossCalculator = () => {\r\n    const { isOpen, onToggle } = useDisclosure()\r\n    const { colorMode } = useColorMode()\r\n    const [assets, setAssets] = useState([\r\n      {\r\n        uuid: 'c2037d93-1f28-4bfc-8495-0afb54e7b962',\r\n        name: 'AVAX',\r\n        priceChange: 400,\r\n        weight: 50,\r\n      },\r\n      {\r\n        uuid: '9e4b081f-75ff-4ac5-9bf3-bc67e7ffeb0f',\r\n        name: 'WBTC',\r\n        priceChange: 150,\r\n        weight: 50,\r\n      }\r\n    ])\r\n  \r\n    const getAssetPriceChangeInX = (assetPriceChangeinPercent) =>\r\n      Math.abs(assetPriceChangeinPercent / 100 + 1)\r\n  \r\n    const holdValue = assets\r\n      .map(\r\n        (asset) =>\r\n          (getAssetPriceChangeInX(asset.priceChange) * asset.weight) / 100\r\n      )\r\n      .reduce((assetA, assetB) => assetA + assetB, 0)\r\n  \r\n    const poolValue = assets\r\n      .map((asset) =>\r\n        Math.pow(getAssetPriceChangeInX(asset.priceChange), asset.weight / 100)\r\n      )\r\n      .reduce((assetA, assetB) => assetA * assetB, 1)\r\n  \r\n    const calculateImpermanentLoss = (poolValue, holdValue) => {\r\n      const BNPoolValue = new BigNumber(poolValue)\r\n      const BNHoldValue = new BigNumber(holdValue)\r\n  \r\n      return BNPoolValue.dividedBy(BNHoldValue).minus(1).dp(4)\r\n    }\r\n  \r\n    const impermanentLoss = calculateImpermanentLoss(poolValue, holdValue)\r\n  \r\n    const pnl =\r\n      assets\r\n        .map((asset) => (asset.priceChange / 100) * (asset.weight / 100))\r\n        .reduce((a, b) => a + b, 0) - Math.abs(impermanentLoss)\r\n  \r\n    const updateName = (asset, e) => {\r\n      const newAssets = assets.map((newAsset) => {\r\n        if (newAsset.uuid === asset.uuid) {\r\n          return { ...newAsset, name: e.target.value }\r\n        }\r\n        return newAsset\r\n      })\r\n      setAssets(newAssets)\r\n    }\r\n  \r\n    const updatePriceChange = (asset, value) => {\r\n      const newAssets = assets.map((newAsset) => {\r\n        if (newAsset.uuid === asset.uuid) {\r\n          return { ...newAsset, priceChange: value }\r\n        }\r\n        return newAsset\r\n      })\r\n      setAssets(newAssets)\r\n    }\r\n  \r\n    const updateWeight = (asset, e) => {\r\n      const newAssets = assets.map((newAsset) => {\r\n        if (newAsset.uuid === asset.uuid) {\r\n          return { ...newAsset, weight: e.target.value }\r\n        }\r\n        return newAsset\r\n      })\r\n      setAssets(newAssets)\r\n    }\r\n  \r\n    const totalPoolWeight = assets\r\n      .map((asset) => asset.weight)\r\n      .reduce((assetA, assetB) => Number(assetA) + Number(assetB), 0)\r\n  \r\n    const addAsset = () => {\r\n      setAssets([\r\n        ...assets,\r\n        {\r\n          uuid: uuid(),\r\n          priceChange: 0,\r\n          weight: 100 - totalPoolWeight >= 2 ? 100 - totalPoolWeight : 2,\r\n        },\r\n      ])\r\n    }\r\n  \r\n    const deleteAsset = (thisAsset) =>\r\n      setAssets([...assets.filter((asset) => asset.uuid !== thisAsset.uuid)])\r\n  \r\n    const clearAssets = () =>\r\n      setAssets([\r\n        {\r\n          uuid: uuid(),\r\n          name: '',\r\n          priceChange: 0,\r\n          weight: 50,\r\n        },\r\n        {\r\n          uuid: uuid(),\r\n          name: '',\r\n          priceChange: 0,\r\n          weight: 50,\r\n        },\r\n      ])\r\n  \r\n    return (\r\n      <Box\r\n        w={{ md: '800px' }}\r\n        p={{ base: 0, md: 5 }}\r\n        m={6}\r\n        mt={0}\r\n        borderWidth={{ base: 0, md: 1 }}\r\n        rounded=\"lg\"\r\n        borderColor=\"linear(to-r, brand.300 ,brand.600)\"\r\n      >\r\n        <Box>\r\n          <SimpleGrid columns={3} minChildWidth=\"250px\">\r\n            <Stat>\r\n              <StatLabel fontSize=\"xl\">Impermanent Loss</StatLabel>\r\n              {assets.length > 1 ? (\r\n                <>\r\n                  <StatNumber fontSize=\"5xl\">\r\n                    <AnimatedNumber\r\n                      value={impermanentLoss}\r\n                      formatValue={(value) =>\r\n                        numeral(Math.abs(value)).format('0.00%')\r\n                      }\r\n                      duration={500}\r\n                    />\r\n                  </StatNumber>\r\n                  <StatHelpText>\r\n                    <Button\r\n                      color={colorMode === 'dark' ? 'gray.100' : 'gray.700'}\r\n                      size=\"xs\"\r\n                      variant=\"link\"\r\n                      textDecoration=\"underline\"\r\n                      onClick={() => onToggle()}\r\n                      my={1}\r\n                    >\r\n                      {isOpen ? 'Hide' : 'Show'} calculation\r\n                    </Button>\r\n                  </StatHelpText>\r\n                </>\r\n              ) : (\r\n                <Flex alignItems=\"center\" color=\"blue.500\">\r\n                  <InfoIcon mr=\"2\" /> Add at least 2 assets m8\r\n                </Flex>\r\n              )}\r\n            </Stat>\r\n            {/* <Stat>\r\n              <StatLabel fontSize=\"xl\">Profit/Loss</StatLabel>\r\n              {assets.length > 0 ? (\r\n                <>\r\n                  <StatNumber fontSize=\"5xl\">\r\n                    <AnimatedNumber\r\n                      value={pnl}\r\n                      formatValue={(value) =>\r\n                        numeral(Math.abs(value)).format('0.00%')\r\n                      }\r\n                      duration={500}\r\n                    />\r\n                    <StatHelpText>(Total gain - IL)</StatHelpText>\r\n                  </StatNumber>\r\n                </>\r\n              ) : (\r\n                <Flex alignItems=\"center\" color=\"blue.500\">\r\n                  <InfoIcon mr=\"2\" /> Add at least 1 asset m8\r\n                </Flex>\r\n              )}\r\n            </Stat> */}\r\n            {totalPoolWeight !== 100 && (\r\n              <Stat color={totalPoolWeight !== 100 ? 'brand.400' : 'green.500'}>\r\n                <StatLabel fontSize=\"xl\">Total Pool Weight</StatLabel>\r\n                <StatNumber fontSize=\"5xl\">\r\n                  {numeral(totalPoolWeight / 100).format('0%')}\r\n                </StatNumber>\r\n                <StatHelpText>Must equal 100!</StatHelpText>\r\n              </Stat>\r\n            )}\r\n          </SimpleGrid>\r\n          {isOpen && (\r\n            <Box my={3} p={3} borderRadius={6} borderWidth={1}>\r\n              <Box mb={3}>\r\n                <Heading size=\"sm\">Calculating Impermanent Loss</Heading>\r\n                <Text fontStyle=\"italic\">\r\n                  Impermanent Loss = Value of Pool / Asset Value if Held - 1\r\n                </Text>\r\n                <Text>\r\n                  {numeral(impermanentLoss).format('0.00')} ={' '}\r\n                  {numeral(poolValue).format('0.00')} /{' '}\r\n                  {numeral(holdValue).format('0.00')} - 1\r\n                </Text>\r\n                <Text>\r\n                  (Impermanent Loss is formatted from{' '}\r\n                  {numeral(impermanentLoss).format('0.00')} to a % and made\r\n                  positive (losses cannot be negative) →{' '}\r\n                  {numeral(Math.abs(impermanentLoss)).format('0.00%')})\r\n                </Text>\r\n              </Box>\r\n              <Box mb={3}>\r\n                <Heading size=\"sm\">Calculating 'Value of Pool'</Heading>\r\n                <Text fontStyle=\"italic\">\r\n                  To get the Pool Value, take each asset, put its weight divided\r\n                  by hundred to the power of the price change. Then multiply all\r\n                  these.\r\n                </Text>\r\n                <Text>\r\n                  {numeral(poolValue).format('0.00')} ={' '}\r\n                  {assets.map(\r\n                    (asset, i) =>\r\n                      `${getAssetPriceChangeInX(asset.priceChange)}^${\r\n                        asset.weight\r\n                      } / 100${assets.length !== i + 1 ? ' * ' : ''}`\r\n                  )}\r\n                </Text>\r\n              </Box>\r\n              <Box mb={3}>\r\n                <Heading size=\"sm\">Calculating 'Asset Value if Held'</Heading>\r\n                <Text fontStyle=\"italic\">\r\n                  To get the Hold Value, take each asset, and multiply its price\r\n                  change by its weight, then divide by 100. Then add all these up.\r\n                </Text>\r\n                <Text>\r\n                  {numeral(holdValue).format('0.00')} ={' '}\r\n                  {assets.map(\r\n                    (asset, i) =>\r\n                      `${getAssetPriceChangeInX(asset.priceChange)} x ${\r\n                        asset.weight\r\n                      } / 100${assets.length !== i + 1 ? ' + ' : ''}`\r\n                  )}\r\n                </Text>\r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n        <Divider my={6} display={{ base: 'none', md: 'block' }} />\r\n        <Box display={{ base: 'block', md: 'none' }} mb={3}>\r\n          <Button\r\n            size=\"sm\"\r\n            onClick={addAsset}\r\n            leftIcon={<AddIcon />}\r\n            variant=\"solid\"\r\n            mr={3}\r\n            colorScheme={assets.length <= 1 ? 'blue' : 'gray'}\r\n          >\r\n            Add Asset\r\n          </Button>\r\n          <Button\r\n            size=\"sm\"\r\n            onClick={clearAssets}\r\n            variant=\"outline\"\r\n            leftIcon={<RepeatIcon />}\r\n          >\r\n            Clear Assets\r\n          </Button>\r\n        </Box>\r\n        <Box mb={3} display={{ base: 'none', md: 'block' }}>\r\n          <Stack isInline spacing={4}>\r\n            <Text w={175} fontWeight=\"bold\">\r\n              Asset\r\n            </Text>\r\n            <Text w={175} fontWeight=\"bold\">\r\n              Price Changes by...\r\n            </Text>\r\n            <Flex\r\n              alignItems=\"center\"\r\n              w={175}\r\n              fontWeight=\"bold\"\r\n              color={totalPoolWeight !== 100 ? 'brand.400' : 'inherit'}\r\n            >\r\n              <Text>Pool Weight</Text>\r\n            </Flex>\r\n          </Stack>\r\n        </Box>\r\n        <SimpleGrid columns={{ base: 1, sm: 2, md: 1 }} spacingX={3}>\r\n          {assets.map((asset, i) => (\r\n            <Box\r\n              key={asset.uuid}\r\n              borderWidth={{ base: 1, md: 0 }}\r\n              p={{ base: 3, md: 0 }}\r\n              mb={{ base: 3, md: 0 }}\r\n              borderRadius={6}\r\n            >\r\n              <Stack\r\n                align={{ base: 'start', md: 'center' }}\r\n                direction={{ base: 'column', md: 'row' }}\r\n                spacing={4}\r\n              >\r\n                <FormControl w={175}>\r\n                  <FormLabel mb={2} display={{ base: 'block', md: 'none' }}>\r\n                    Asset {i + 1}\r\n                  </FormLabel>\r\n                  <Input\r\n                    w={125}\r\n                    placeholder=\"eg AVAX\"\r\n                    value={asset.name}\r\n                    onChange={(e) => updateName(asset, e)}\r\n                  />\r\n                </FormControl>\r\n                <FormControl w={175}>\r\n                  <FormLabel mb={2} display={{ base: 'block', md: 'none' }}>\r\n                    Price changes by...\r\n                  </FormLabel>\r\n                  <InputGroup w={100}>\r\n                    <Input\r\n                      w={100}\r\n                      type=\"number\"\r\n                      placeholder=\"0\"\r\n                      step=\"25\"\r\n                      min=\"-100\"\r\n                      value={asset.priceChange}\r\n                      onChange={(e) => {\r\n                        updatePriceChange(asset, e.target.value)\r\n                      }}\r\n                    />\r\n                    <InputRightElement\r\n                      color={colorMode === 'dark' ? 'gray.100' : 'gray.700'}\r\n                      children=\"%\"\r\n                      fontWeight=\"bold\"\r\n                    />\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <FormControl w={175}>\r\n                  <FormLabel\r\n                    mb={2}\r\n                    display={{ base: 'block', md: 'none' }}\r\n                    color={totalPoolWeight !== 100 && 'brand.400'}\r\n                  >\r\n                    Pool weight\r\n                  </FormLabel>\r\n                  <InputGroup w={100}>\r\n                    <Input\r\n                      w={100}\r\n                      type=\"number\"\r\n                      step=\"1\"\r\n                      min=\"2\"\r\n                      max=\"100\"\r\n                      placeholder={50}\r\n                      focusBorderColor={\r\n                        totalPoolWeight !== 100 ? 'brand.400' : 'blue.500'\r\n                      }\r\n                      borderColor={\r\n                        totalPoolWeight !== 100 ? 'brand.400' : 'inherit'\r\n                      }\r\n                      value={asset.weight}\r\n                      onChange={(e) => updateWeight(asset, e)}\r\n                    />\r\n                    <InputRightElement\r\n                      color={colorMode === 'dark' ? 'gray.100' : 'gray.700'}\r\n                      borderLeftColor={\r\n                        totalPoolWeight !== 100 ? 'brand.400' : 'gray.200'\r\n                      }\r\n                      children=\"%\"\r\n                      fontWeight=\"bold\"\r\n                    />\r\n                  </InputGroup>\r\n                </FormControl>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => deleteAsset(asset)}\r\n                  leftIcon={<DeleteIcon />}\r\n                >\r\n                  Remove\r\n                </Button>\r\n              </Stack>\r\n              <Divider my={6} display={{ base: 'none', md: 'block' }} />\r\n            </Box>\r\n          ))}\r\n        </SimpleGrid>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" wrap=\"wrap\">\r\n          <Box mb={{ base: 3, sm: 0 }}>\r\n            <Button\r\n              size=\"sm\"\r\n              onClick={addAsset}\r\n              leftIcon={<AddIcon />}\r\n              variant=\"solid\"\r\n              mr={3}\r\n              colorScheme={assets.length <= 1 ? 'blue' : 'gray'}\r\n            >\r\n              Add Asset\r\n            </Button>\r\n            <Button\r\n              size=\"sm\"\r\n              onClick={clearAssets}\r\n              variant=\"outline\"\r\n              leftIcon={<RepeatIcon />}\r\n            >\r\n              Clear Assets\r\n            </Button>\r\n          </Box>\r\n        </Flex>\r\n      </Box>\r\n    )\r\n  }\r\n  \r\n  export default ImpermanentLossCalculator\r\n  ","import './App.css';\nimport ParticlesBg from 'particles-bg'\nimport React from 'react';\nimport ImpermanentLossCalculator from './components/ImpermanentLossCalculator'\n\n\nconst DONATIONS = [\n  {\n    name:\"Bitcoin\",\n    symbol:\"BTC\",\n    walletAdr:\"1EHpwE4upzdSgzs4ErJcchJKGkzjgixsrx\",\n    logo:\"\"\n  }, {\n    name:\"Ethereum\",\n    symbol:\"ERC20\",\n    walletAdr:\"0x58F7F9b524357571d376811369708E522A13Fc53\",\n    logo:\"\"\n  }, {\n    name:\"Binance BNB\",\n    symbol:\"ERC20\",\n    walletAdr:\"0x58F7F9b524357571d376811369708E522A13Fc53\",\n    logo:\"\"\n  }, {\n    name:\"Avalanche AVAX \",\n    symbol:\"ERC20\",\n    walletAdr:\"0x58F7F9b524357571d376811369708E522A13Fc53\",\n    logo:\"\"\n  }\n]\n\nconst STYLES={\n  main:{marginBottom:\"-15px\"},\n  header:{height:\"150px\",overflow: \"hidden\",paddingTop:\"50px\",paddingLeft:\"20vw\"},\n  content:{background:\"white\",overflow: \"hidden\",padding:\"50px\"},\n  footer:{background:\"grey\",overflow: \"hidden\",padding:\"50px\",color:\"white\"},\n  input:{marginLeft:\"5px\",marginRight:\"5px\",minWidth:\"250px\"},\n  table:{display: \"table\",margin: \"auto\"},\n  table2:{display: \"table\",margin: \"auto\",paddingBottom:\"120px\"},\n  textCenter:{textAlign:\"center\"}\n}\n\n\nclass App extends React.Component {\n \n  constructor(props){\n    super(props)\n    this.state={\n      initialValueA:0,\n      initialValueB:0,\n      initialAmountA:0,\n      initialAmoungB:0,\n      initialPriceAB:0,\n      currentValueA:0,\n      currentValueB:0,\n      currentAmountA:0,\n      currentAmountB:0,\n      currentPriceAB:0,\n      totalSpent:0,\n      totalReceived:0,\n      totalPotential:0,\n      impermanentLossValue:0,\n      impermanentLossPercent:0,\n    }\n    this.changeValue = this.changeValue.bind(this)\n    this.calculateImpermanentLoss = this.calculateImpermanentLoss.bind(this)\n  }\n\n  getDonationComponent(){\n    let donations = []\n    for(let counter=0;counter<DONATIONS.length;++counter){\n      donations.push(<div>\n\n        {DONATIONS[counter].name} ({DONATIONS[counter].symbol}): {DONATIONS[counter].walletAdr}\n\n      </div>) \n    }\n    return donations\n  }\n\n  calculateImpermanentLoss(){\n    let k =0\n    let initialPriceAB =0\n    let currentPriceAB =0\n\n    let localThis = this\n\n    let calculateStuff = function(){\n      let currentAmountA = 0\n      let currentAmountB =0\n      let totalSpent = 0\n      let totalReceived  = 0\n      let totalPotential = 0\n      let impermanentLossValue = 0\n      let impermanentLossPercent = 0\n\n      if(localThis.state.currentPriceAB !=0){\n        currentAmountA = localThis.state.initialAmountA*(Math.sqrt(localThis.state.initialPriceAB/localThis.state.currentPriceAB))\n      }\n      currentAmountB =currentAmountA*localThis.state.currentPriceAB\n   \n      totalSpent = (localThis.state.initialValueA*localThis.state.initialAmountA)+(localThis.state.initialValueB*localThis.state.initialAmountB)\n     \n      totalReceived = (localThis.state.currentValueA*currentAmountA)+(localThis.state.currentValueB*currentAmountB)\n\n      totalPotential = (localThis.state.currentValueA*localThis.state.initialAmountA)+(localThis.state.currentValueB*localThis.state.initialAmountB)\n\n      impermanentLossValue = totalPotential - totalReceived\n\n      if(totalSpent!=0){\n        impermanentLossPercent = (impermanentLossValue / totalPotential)*100\n      }\n\n      localThis.setState({\n        currentAmountA,\n        currentAmountB\n      })\n\n      if(!isNaN(totalSpent)){\n        localThis.setState({\n          totalSpent\n        })\n      }\n      if(!isNaN(totalSpent)){\n        localThis.setState({\n          totalSpent\n        })\n      }\n      if(!isNaN(totalReceived)){\n        localThis.setState({\n          totalReceived\n        })\n      }\n      if(!isNaN(totalPotential)){\n        localThis.setState({\n          totalPotential\n        })\n      }\n      if(!isNaN(impermanentLossValue)){\n        localThis.setState({\n          impermanentLossValue\n        })\n      }\n      if(!isNaN(impermanentLossPercent)){\n        localThis.setState({\n          impermanentLossPercent\n        })\n      }\n    }\n\n    if(this.state.initialValueB != 0){\n      initialPriceAB = this.state.initialValueA/this.state.initialValueB\n      this.setState({\n        initialPriceAB\n      },()=>{calculateStuff()}) \n    }\n    if(this.state.currentValueB != 0){\n      currentPriceAB = this.state.currentValueA/this.state.currentValueB\n      this.setState({\n        currentPriceAB\n      },()=>{calculateStuff()}) \n    }\n\n    calculateStuff()\n  }\n\n  changeValue(event,isCoinA,isInitial,isValue){\n    if(isCoinA){\n      if(isInitial){\n        if(isValue){\n          this.setState({\n            initialValueA:event.target.value\n          },()=>this.calculateImpermanentLoss())\n        }else{\n          this.setState({\n            initialAmountA:event.target.value\n          },()=>this.calculateImpermanentLoss())\n        }\n      }else{\n        if(isValue){\n          this.setState({\n            currentValueA:event.target.value\n          },()=>this.calculateImpermanentLoss())\n        }else{\n          this.setState({\n            currentAmountA:event.target.value\n          },()=>this.calculateImpermanentLoss())\n        }\n      }\n    }else{\n      if(isInitial){\n        if(isValue){\n          this.setState({\n            initialValueB:event.target.value\n          },()=>this.calculateImpermanentLoss())\n        }else{\n          this.setState({\n            initialAmountB:event.target.value\n          },()=>this.calculateImpermanentLoss())\n        }\n      }else{\n        if(isValue){\n          this.setState({\n            currentValueB:event.target.value\n          },()=>this.calculateImpermanentLoss())\n        }else{\n          this.setState({\n            currentAmountB:event.target.value\n          },()=>this.calculateImpermanentLoss())\n        }\n      }\n    }\n  }\n\n  render(){\n    return (\n      <div style={STYLES.main}>\n        <div className=\"header\"  style={STYLES.header}>\n          <h1>\n            Impermanent loss calculator\n          </h1> \n        </div>\n       \n        <div className=\"content\" style={STYLES.content}> \n          {/**  <div style={STYLES.table}>\n            <h4>\n              Initial\n            </h4>\n            <div>\n              Value A <input onChange={(event)=>{this.changeValue(event,true,true,true)}} placeholder=\"Initial coin A value (USD) in the pool\"style={STYLES.input} type=\"number\"  />\n              Amount A <input onChange={(event)=>{this.changeValue(event,true,true,false)}} placeholder=\"Initial coin A units\" style={STYLES.input} type=\"number\" />\n            </div>\n            <div>\n              Value B  <input onChange={(event)=>{this.changeValue(event,false,true,true)}} placeholder=\"Initial coin B value (USD) in the pool\" style={STYLES.input}  />\n              Amount B <input onChange={(event)=>{this.changeValue(event,false,true,false)}} placeholder=\"Initial coin B units \" style={STYLES.input}  type=\"number\" />\n            </div>\n            <div>\n              <p>\n                Initial coin A/B price: {this.state.initialPriceAB}\n              </p>\n            </div>\n          </div>\n\n          <div style={STYLES.table}>\n            <h4>\n              Current values\n            </h4>\n            <div>\n              Value A <input onChange={(event)=>{this.changeValue(event,true,false,true)}} placeholder=\"Current coin A value (USD) in the pool\"style={STYLES.input} type=\"number\"  />\n              Amount A <input value={this.state.currentAmountA} disabled onChange={(event)=>{this.changeValue(event,true,false,false)}} placeholder=\"Current coin A units\" style={STYLES.input} type=\"number\" />\n            </div>\n            <div>\n              Value B <input  onChange={(event)=>{this.changeValue(event,false,false,true)}} placeholder=\"Current coin B value (USD) in the pool\" style={STYLES.input}  />\n              Amount B <input value={this.state.currentAmountB} disabled onChange={(event)=>{this.changeValue(event,false,false,false)}} placeholder=\"Current coin B units \" style={STYLES.input}  type=\"number\" />\n            </div>\n            <div>\n              <p>\n                Current coin A/B price:  {this.state.currentPriceAB}\n              </p>\n            </div>\n          </div>\n\n          <h3 style={STYLES.textCenter}>\n            Results\n          </h3>\n\n          <div style={STYLES.table}>\n            <p>\n              Total spent (USD): {this.state.totalSpent}\n            </p>\n            <p>\n              Total acquired (USD): {this.state.totalReceived}\n            </p>\n            <p>\n              Total potential (USD): {this.state.totalPotential}\n            </p>\n            <p>\n              Impermanent loss (USD): {this.state.impermanentLossValue}\n            </p>\n            <p>\n              Impermanent loss : {this.state.impermanentLossPercent}%\n            </p>\n          </div>*/}\n \n          <div style={STYLES.table2} >\n            <ImpermanentLossCalculator />\n          </div>\n        </div>\n       \n        <div className=\"footer\" style={STYLES.footer}>\n          <div style={STYLES.table}>\n            <h2>\n              Roadmap coming soon.\n            </h2>\n            Sponsor this project by donating: <br/> <br/>\n            {this.getDonationComponent()}\n          </div>\n        </div>\n     \n      {/** <ParticlesBg type=\"cobweb\"  bg={true} />*/}  \n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}